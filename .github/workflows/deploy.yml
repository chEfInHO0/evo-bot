name: Deploy Evolution Bot Stack

on:
  push:
    branches:
      - main # O pipeline roda sempre que houver um push para a branch 'main'

jobs:
  build_and_deploy:
    runs-on: ubuntu-latest

    steps:
      # 1. Checkout do código
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build Bot Image Locally
        run: docker build -t ${{ secrets.DOCKER_USERNAME }}/evolution-bot:latest ./bot

      - name: Push Bot Image to Docker Hub
        run: docker push ${{ secrets.DOCKER_USERNAME }}/evolution-bot:latest

      - name: Configure SSH Key
        uses: webfactory/ssh-agent@v0.8.0
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

      - name: Add SSH Known Hosts Securely
        env:
          HOST: ${{ secrets.VPS_HOST }}
        run: |
          # 1. Cria a pasta .ssh se ela não existir
          mkdir -p ~/.ssh

          # 2. Usa ssh-keyscan para gerar e injetar a chave do host no known_hosts
          ssh-keyscan -H $HOST >> ~/.ssh/known_hosts

          # 3. Define as permissões corretas
          chmod 600 ~/.ssh/known_hosts

      - name: Install Docker Compose Plugin on VPS
        env:
          HOST: ${{ secrets.VPS_HOST }}
          USER: ${{ secrets.VPS_USERNAME }}
        run: |
          # Comandos executados na VPS para instalar o Docker Compose v2 (plugin)
          ssh $USER@$HOST "
            # 1. Garante que o diretório de plugins do Docker CLI existe
            sudo mkdir -p /usr/local/lib/docker/cli-plugins/
            
            # 2. Baixa a versão estável do plugin 'compose'
            sudo curl -SL https://github.com/docker/compose/releases/download/v2.24.5/docker-compose-linux-x86_64 -o /usr/local/lib/docker/cli-plugins/docker-compose
            
            # 3. Dá permissão de execução
            sudo chmod +x /usr/local/lib/docker/cli-plugins/docker-compose
            
            # 4. (Opcional, mas útil) Cria um link simbólico para a sintaxe legada (docker-compose)
            # Isso ajuda a garantir que 'docker compose' e 'docker-compose' funcionem
            # É opcional se você usar apenas a sintaxe moderna no deploy, mas é uma boa prática
            sudo ln -s /usr/local/lib/docker/cli-plugins/docker-compose /usr/bin/docker-compose
          "

      - name: Deploy via SSH
        env:
          HOST: ${{ secrets.VPS_HOST }}
          USER: ${{ secrets.VPS_USERNAME }}
          DOCKER_USER: ${{ secrets.DOCKER_USERNAME }}
        run: |
          # Certifique-se de que a pasta na VPS existe
          ssh $USER@$HOST "mkdir -p ~/projeto-evolution-bot"

          # Sincroniza SOMENTE o docker-compose.yaml (e outros arquivos estáticos como README)
          # O .env é EXCLUÍDO e PRESERVADO na VPS.
          rsync -avz --delete \
                --exclude 'bot/' \
                -e "ssh" \
                docker-compose.yaml ./ $USER@$HOST:~/projeto-evolution-bot/

          # Executa os Comandos Docker Compose na VPS
          ssh $USER@$HOST "
            cd ~/projeto-evolution-bot && \
            
            # Puxa a nova imagem do Bot
            docker pull $DOCKER_USER/evolution-bot:latest && \
            
            # Re-cria os serviços. O docker-compose encontrará o .env existente.
            docker-compose up -d --force-recreate
          "
