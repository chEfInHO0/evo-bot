name: Deploy Evolution Bot Stack

on:
  push:
    branches:
      - main # O pipeline roda sempre que houver um push para a branch 'main'

jobs:
  build_and_deploy:
    runs-on: ubuntu-latest # Executa em um runner padrão do GitHub Actions

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4 # Clona o código do repositório para o runner

      # --- Docker Build e Push ---
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }} # Usa o Secret para login

      - name: Build Bot Image Locally
        # Constrói a imagem Docker a partir do Dockerfile dentro da pasta 'bot/'
        run: docker build -t ${{ secrets.DOCKER_USERNAME }}/evolution-bot:latest ./bot

      - name: Push Bot Image to Docker Hub
        # Envia a imagem recém-construída para o Docker Hub
        run: docker push ${{ secrets.DOCKER_USERNAME }}/evolution-bot:latest

      # --- Configuração de Acesso SSH à VPS ---
      - name: Configure SSH Key
        uses: webfactory/ssh-agent@v0.8.0 # Inicializa o ssh-agent
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }} # Carrega a chave privada para autenticação

      - name: Add SSH Known Hosts Securely
        env:
          HOST: ${{ secrets.VPS_HOST }}
        run: |
          # 1. Cria a pasta .ssh se ela não existir
          mkdir -p ~/.ssh

          # 2. Usa ssh-keyscan para gerar e injetar a chave pública do host
          # Isso resolve o erro 'Host key verification failed' (erro 255)
          ssh-keyscan -H $HOST >> ~/.ssh/known_hosts

          # 3. Define as permissões corretas
          chmod 600 ~/.ssh/known_hosts

      # --- Instalação de Dependências na VPS (Docker Compose) ---
      - name: Install Docker Compose Plugin on VPS
        env:
          HOST: ${{ secrets.VPS_HOST }}
          USER: ${{ secrets.VPS_USERNAME }}
        run: |
          # Comandos executados na VPS para garantir que o Docker Compose v2 (plugin) esteja instalado.
          # Isso resolve o erro 'command not found' (exit code 127)
          ssh $USER@$HOST "
            # 1. Garante que o diretório de plugins do Docker CLI existe
            sudo mkdir -p /usr/local/lib/docker/cli-plugins/
            
            # 2. Baixa a versão estável do plugin 'compose'
            sudo curl -SL https://github.com/docker/compose/releases/download/v2.24.5/docker-compose-linux-x86_64 -o /usr/local/lib/docker/cli-plugins/docker-compose
            
            # 3. Dá permissão de execução
            sudo chmod +x /usr/local/lib/docker/cli-plugins/docker-compose
            
            # 4. Cria um link simbólico, IGNORANDO ERROS se o arquivo já existir (|| true)
            sudo ln -s /usr/local/lib/docker/cli-plugins/docker-compose /usr/bin/docker-compose || true
          "

      # --- Deploy Final e Início do Serviço ---
      - name: Deploy via SSH
        env:
          HOST: ${{ secrets.VPS_HOST }}
          USER: ${{ secrets.VPS_USERNAME }}
          DOCKER_USER: ${{ secrets.DOCKER_USERNAME }}

          # Carrega os Secrets da aplicação no ambiente do passo 'run'
          AUTH_API_KEY: ${{ secrets.BOT_AUTH_API_KEY }}
          ALERT_NUMBER: ${{ secrets.BOT_ALERT_NUMBER }}
          TARGET_NUMBER: ${{ secrets.BOT_TARGET_NUMBER }}
          SESSION_NAME: ${{ secrets.BOT_SESSION_NAME }}

          PG_USER: ${{ secrets.POSTGRES_USER_REAL }}
          PG_PASS: ${{ secrets.POSTGRES_PASS_REAL }}
          PG_DB: ${{ secrets.POSTGRES_DB_REAL }}

        run: |
          # Garante que a pasta de destino na VPS exista
          ssh $USER@$HOST "mkdir -p ~/projeto-evolution-bot"

          # 1. Sincroniza o docker-compose.yaml e o .env.example
          # O .env.example é enviado para referência, mas o .env real será criado abaixo.
          rsync -avz \
                --exclude 'bot/' \
                -e "ssh" \
                docker-compose.yaml .env.example ./ $USER@$HOST:~/projeto-evolution-bot/

          # 2. Executa os Comandos Docker Compose na VPS
          ssh $USER@$HOST "
            # Navega para o diretório do projeto
            cd ~/projeto-evolution-bot && \
            
            # --- CRIAÇÃO SEGURA DO ARQUIVO .ENV NA VPS ---
            # Usa 'echo' para construir o arquivo .env, injetando os valores dos Secrets
            echo '
          # Variáveis de Ambiente Injetadas pelo GitHub Actions
          AUTHENTICATION_API_KEY=\"$AUTH_API_KEY\"
          SERVER_URL=http://evolution-api:8080 
          ALERT_NUMBER=\"$ALERT_NUMBER\"
          TARGET_NUMBER=\"$TARGET_NUMBER\"
          SESSION_NAME=\"$SESSION_NAME\"

          DATABASE_ENABLED=true 
          DATABASE_PROVIDER=postgresql 

          POSTGRES_USER=$PG_USER
          POSTGRES_PASSWORD=$PG_PASS
          POSTGRES_DB=$PG_DB
          DATABASE_CONNECTION_URI=postgresql://${PG_USER}:${PG_PASS}@evo_postgres:5432/${PG_DB}
          ' > .env
            
            # 3. Puxa a nova imagem do Bot
            docker pull $DOCKER_USER/evolution-bot:latest && \
            
            # 4. Re-cria os serviços. O docker-compose agora encontra o .env criado acima.
            docker compose up -d --force-recreate
          "
