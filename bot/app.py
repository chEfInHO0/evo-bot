import requests
import json
import schedule
import time
from datetime import datetime
from dotenv import load_dotenv
from os import environ
from random import choice

# 1. Carrega vari√°veis do arquivo .env
load_dotenv()

API_URL = environ.get("SERVER_URL")  # Ex: http://localhost:8080
SESSION = environ.get("SESSION_NAME")  # Ex: BOT
TOKEN = environ.get("AUTHENTICATION_API_KEY")  # Sua chave de autentica√ß√£o
ALERT_NUMBER = environ.get("ALERT_NUMBER")

MOR = [
    "meu amor ‚ù§",
    "paix√£o da minha vida üíü",
    "raz√£o do meu viver üíó",
    "‚ú® minha fada vampiresca  ‚ú®",
    "minha princesa ‚ù£",
    "meu xuxu üåπ",
    "meu chocolate branco üç´",
    "meu moranguinho do amor üçì",
    "meu p√£o de alho ü•ñüßÑ",
    "meu docinho de coco ü••",
    "minha batata frita üçü",
    "minha hello kitty üòª",
    "minha gostosa üî•"
]


url = f"{API_URL}/message/sendText/{SESSION}"
HEADERS = {
    "apikey": TOKEN,
    "Content-Type": "application/json"
}

# 2. CONFIGURA√á√ïES DO LEMBRETE
# ----------------------------------------------------------------------------------
# !!! IMPORTANTE: SUBSTITUA PELO N√öMERO CORRETO (55DDD9XXXXXXXX)
NUMERO_NAMORADA = environ.get("TARGET_NUMBER")
# ----------------------------------------------------------------------------------


def enviar_mensagem(numero, texto):
    """Envia uma mensagem de texto via Evolution API usando o payload simples."""

    # Payload ajustado que resolveu o erro 400 Bad Request
    data = {
        "number": numero,
        "text": texto,  # Endpoint /sendText espera o texto no n√≠vel raiz
        "options": {
            "delay": 1000,
            "presence": "composing"
        }
    }

    try:
        response = requests.post(url, headers=HEADERS,
                                 data=json.dumps(data), timeout=10)

        if response.status_code == 200:
            print(
                f"[{datetime.now().strftime('%Y-%m-%d %H:%M:%S')}] ‚úÖ Mensagem enviada para {numero}")
        else:
            # Inclui a resposta completa para f√°cil diagn√≥stico
            print(
                f"[{datetime.now().strftime('%Y-%m-%d %H:%M:%S')}] ‚ùå Erro ao enviar: {response.status_code} - {response.text}")

    except requests.exceptions.ConnectionError:
        print(f"[{datetime.now().strftime('%Y-%m-%d %H:%M:%S')}] ‚ùå ERRO: Falha de conex√£o com a Evolution API.")
    except Exception as e:
        print(f"‚ùå Erro geral durante o envio: {e}")


# 3. FUN√á√ïES DE AGENDAMENTO ESPEC√çFICAS
# Voc√™ pode criar uma fun√ß√£o para cada dose
def lembrete_manha():
    """Lembrete de Rem√©dio da Manh√£ (8:00)"""
    texto = f"Bom dia {choice(MOR)}! ‚òÄÔ∏è Lembre-se de tomar seus rem√©dios e beber bastante √°gua üßä!"
    enviar_mensagem(NUMERO_NAMORADA, texto)


def lembrete_remedio():
    texto = f"{choice(MOR)}, est√° quase na hora do seu rem√©dio, n√£o se esque√ßa de tomar eles, eu te amo ‚ù§"
    enviar_mensagem(NUMERO_NAMORADA, texto)


def lembrete_almoco():
    """Lembrete de Rem√©dio do Almo√ßo (12:30)"""
    texto = f"J√° almo√ßou {choice(MOR)}? Saiba que voc√™ √© muito importante pra mim "
    enviar_mensagem(NUMERO_NAMORADA, texto)


def lembrete_noite():
    """Lembrete de Rem√©dio da Noite (22:00)"""
    texto = f"Boa noite {choice(MOR)}!  Est√° quase na hora de dormir e de tomar os rem√©dios. Te amo! üåô"
    enviar_mensagem(NUMERO_NAMORADA, texto)


# 4. AGENDAMENTO DI√ÅRIO
# Agenda as fun√ß√µes para rodar todos os dias nos hor√°rios corretos.
print(f"[{datetime.now().strftime('%Y-%m-%d %H:%M:%S')}] Bot de Lembretes Agendado e Rodando...")
print("-" * 50)


schedule.every().day.at("07:00").do(lembrete_manha)

schedule.every().day.at("10:55").do(lembrete_remedio)

schedule.every().day.at("13:30").do(lembrete_almoco)

schedule.every().day.at("22:00").do(lembrete_noite)

schedule.every().day.at("22:55").do(lembrete_remedio)

enviar_mensagem(ALERT_NUMBER, "Bot iniciando")

# 5. LOOP PRINCIPAL
while True:
    # Verifica se alguma tarefa agendada deve ser executada
    schedule.run_pending()
    # Espera 1 segundo antes de checar novamente (para n√£o consumir muita CPU)
    time.sleep(1)
